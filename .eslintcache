[{"F:\\cloudstorage\\client\\src\\index.js":"1","F:\\cloudstorage\\client\\src\\App.js":"2","F:\\cloudstorage\\client\\src\\reportWebVitals.js":"3","F:\\cloudstorage\\client\\src\\components\\Homepage\\Homepage.js":"4","F:\\cloudstorage\\client\\src\\components\\Login\\Login.js":"5","F:\\cloudstorage\\client\\src\\components\\AdditionalComponents\\Loading.js":"6","F:\\cloudstorage\\client\\src\\components\\Signup\\Signup.js":"7","F:\\cloudstorage\\client\\src\\components\\Dashboard\\Dashboard.js":"8","F:\\cloudstorage\\client\\src\\components\\Dashboard\\StoragePie.js":"9","F:\\cloudstorage\\client\\src\\components\\Dashboard\\ProfileCard.js":"10","F:\\cloudstorage\\client\\src\\components\\Dashboard\\AllFiles.js":"11","F:\\cloudstorage\\client\\src\\components\\Dashboard\\EachFileOptions.js":"12","F:\\cloudstorage\\client\\src\\components\\Dashboard\\AddFiles.js":"13","F:\\cloudstorage\\client\\src\\components\\AdditionalComponents\\Footer.js":"14"},{"size":455,"mtime":1607440964814,"results":"15","hashOfConfig":"16"},{"size":770,"mtime":1607614883916,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":5607,"mtime":1607776022031,"results":"19","hashOfConfig":"16"},{"size":6479,"mtime":1607775647885,"results":"20","hashOfConfig":"16"},{"size":717,"mtime":1607607035371,"results":"21","hashOfConfig":"16"},{"size":7364,"mtime":1607775665369,"results":"22","hashOfConfig":"16"},{"size":5193,"mtime":1607875475906,"results":"23","hashOfConfig":"16"},{"size":2856,"mtime":1607874734591,"results":"24","hashOfConfig":"16"},{"size":510,"mtime":1607769428745,"results":"25","hashOfConfig":"16"},{"size":6093,"mtime":1607787249467,"results":"26","hashOfConfig":"16"},{"size":4603,"mtime":1607875326003,"results":"27","hashOfConfig":"16"},{"size":6497,"mtime":1607776284476,"results":"28","hashOfConfig":"16"},{"size":226,"mtime":1607775062884,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"k82jsb",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"F:\\cloudstorage\\client\\src\\index.js",[],["60","61"],"F:\\cloudstorage\\client\\src\\App.js",[],"F:\\cloudstorage\\client\\src\\reportWebVitals.js",[],"F:\\cloudstorage\\client\\src\\components\\Homepage\\Homepage.js",[],"F:\\cloudstorage\\client\\src\\components\\Login\\Login.js",[],"F:\\cloudstorage\\client\\src\\components\\AdditionalComponents\\Loading.js",[],"F:\\cloudstorage\\client\\src\\components\\Signup\\Signup.js",[],"F:\\cloudstorage\\client\\src\\components\\Dashboard\\Dashboard.js",[],"F:\\cloudstorage\\client\\src\\components\\Dashboard\\StoragePie.js",["62"],"F:\\cloudstorage\\client\\src\\components\\Dashboard\\ProfileCard.js",[],"F:\\cloudstorage\\client\\src\\components\\Dashboard\\AllFiles.js",["63"]," /* Utility Modules*/\r\n  import React,{useState,useEffect} from 'react'\r\n  import {Jumbotron,Alert,Card,Col,Row} from 'react-bootstrap'\r\n  import axios from 'axios'\r\n\r\n\r\n /* Components */\r\n  import Loading from '../AdditionalComponents/Loading';\r\n  import EachFileOptions from './EachFileOptions';\r\n\r\n /*extra import*/\r\n  import ApplicationType from '../../assets/images/allFiles/application.jpg'\r\n  import AudioType from '../../assets/images/allFiles/audio.png'\r\n  import DocumentType from '../../assets/images/allFiles/document.jpg'\r\n  import ImageType from '../../assets/images/allFiles/image.jpg'\r\n  import VideoType from '../../assets/images/allFiles/video.jpg'\r\n  import AddFiles from '../../assets/images/allFiles/add.jpg'\r\n\r\nfunction AllFiles({accessToken,show,refreshFilesFunc,currShowAllFiles}) {\r\n\r\n    const [myFiles,setMyFiles]             = useState([]);\r\n    const [utilityStates,setUtilityStates] = useState({\r\n        alert:'',\r\n        variant:'light',\r\n        showAlert:false\r\n    })\r\n    const [loading,setLoading]              = useState(false);\r\n\r\n\r\n    /**\r\n     * Get all the files\r\n     */\r\n    const fetchFiles=()=>{\r\n        if(accessToken==='')\r\n            return;\r\n        //loading icon\r\n        setLoading(true);\r\n\r\n        const url = `${process.env.REACT_APP_SERVER_URL_PREFIX}/files/allfiles`;\r\n\r\n\r\n        // fetch files\r\n        axios.get(url,{headers:{authorization: `Token ${accessToken}`}})\r\n            .then(response=>{\r\n                setMyFiles([...response.data.files]);\r\n                setUtilityStates({alert:response.data.message,variant:'success'});\r\n                setLoading(false);\r\n                \r\n            })\r\n            .catch(error=>{\r\n                const errMsg = error.response ? (error.response.data.errors.message):('Unknown Error Occured');\r\n                setUtilityStates({alert:errMsg,variant:'danger'});\r\n                setLoading(false);\r\n            })\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch files as soon as component\r\n     * loads or updates\r\n     */\r\n    useEffect(()=>{\r\n        fetchFiles();\r\n    },[show])\r\n\r\n\r\n    /**\r\n     * \r\n     * @param {*} contentType : type of content \r\n     * \r\n     */\r\n    const checkMimeType = (contentType)=>{\r\n        var type = contentType.split('/')[0];\r\n        var subType = contentType.split('/')[1];\r\n\r\n        if(type==='image')\r\n            return ImageType;\r\n        else if(type==='text')\r\n            return DocumentType;\r\n        else if(type==='audio')\r\n            return AudioType;\r\n        else if(type==='video')\r\n            return VideoType;\r\n        else{\r\n            if(subType==='pdf'||subType==='json'||subType==='csv'||subType.includes('word'))\r\n                return DocumentType;\r\n            else\r\n                return ApplicationType\r\n        }\r\n            \r\n    }\r\n\r\n    const showEachFileMessage = (alertMsg,variantType)=>{\r\n        setUtilityStates({alert:alertMsg,variant:variantType});\r\n    } \r\n\r\n    const setURL = (eleID='',URL='')=>{\r\n        document.getElementById(`${eleID}`).value = URL;\r\n    }\r\n\r\n    return (\r\n        <Jumbotron id=\"filesView\">\r\n            <Loading show={loading}/>\r\n\r\n            <Alert \r\n                variant={utilityStates.variant} \r\n                id=\"fileAlert\"\r\n                show={utilityStates.showAlert}\r\n                onClose={() => setUtilityStates({showAlert:false})} \r\n                dismissible\r\n            >\r\n                {utilityStates.alert}\r\n            </Alert>\r\n\r\n            <Row>\r\n            {\r\n                myFiles.length ? (\r\n                    myFiles.map(file=>{\r\n                        return (\r\n                        <Col key={file._id} xs={8} sm={6} md={6} lg={4} xl={3} id=\"colCards\" style={{margin:\"auto\"}}>\r\n                            \r\n                            <Card className=\"myFilesCard\">\r\n                                <div id=\"moreOptionsBtn\">\r\n                                    <EachFileOptions \r\n                                        fileKey={file.fileKey}\r\n                                        ACL={file.ACL}\r\n                                        accessToken={accessToken}\r\n                                        sendResMsg={showEachFileMessage}\r\n                                        setURL={setURL}\r\n                                        fileId={file._id}\r\n                                        refreshFilesFunc={refreshFilesFunc}\r\n                                        currShowAllFiles={currShowAllFiles}\r\n                                    />\r\n                                </div>\r\n                                <Card.Img variant=\"top\" src={checkMimeType(file.contentType)} \r\n                                    style={{width:'160px',margin:'0 auto'}}\r\n                                />\r\n                                <Card.Body style={{margin:'2px auto',padding:'0%'}}>\r\n                                    <Card.Title className=\"cardTitle\">{file.originalname}</Card.Title>\r\n                                </Card.Body>\r\n                                <input \r\n                                    id={file._id} \r\n                                    style={{marginTop:\"10px\",scrollBehavior:\"smooth\",overflowX:\"scroll\"}}\r\n                                    value={(file.ACL==='private')?('URL Private'):(file.url)}\r\n                                    readOnly\r\n                                    className=\"cardURLInputField\"\r\n                                />\r\n                            </Card>\r\n\r\n                        </Col>)\r\n                    })\r\n                ):(\r\n                    <Card id=\"noFilesFound\">\r\n                        <Card.Img variant=\"top\" src={AddFiles} />\r\n                        <Card.Body>\r\n                            <Card.Title>Add Files</Card.Title>\r\n                            <Card.Text>\r\n                                Add files to view them\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )\r\n            }\r\n            </Row>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default AllFiles\r\n","F:\\cloudstorage\\client\\src\\components\\Dashboard\\EachFileOptions.js",["64"],"F:\\cloudstorage\\client\\src\\components\\Dashboard\\AddFiles.js",[],"F:\\cloudstorage\\client\\src\\components\\AdditionalComponents\\Footer.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":63,"column":8,"nodeType":"71","endLine":63,"endColumn":14,"suggestions":"72"},{"ruleId":"69","severity":1,"message":"73","line":64,"column":7,"nodeType":"71","endLine":64,"endColumn":13,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":5,"column":10,"nodeType":"77","messageId":"78","endLine":5,"endColumn":12},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchStorage'. Either include it or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has a missing dependency: 'fetchFiles'. Either include it or remove the dependency array.",["82"],"no-unused-vars","'fs' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [fetchStorage, show]",{"range":"87","text":"88"},"Update the dependencies array to be: [fetchFiles, show]",{"range":"89","text":"90"},[1862,1868],"[fetchStorage, show]",[2080,2086],"[fetchFiles, show]"]